---
en:
  application:
    navigation:
      toggle_nav: 'Toggle navigation'
  clone_call_jobs:
    clone_call_job:
      branch: '(branch: %{branch})'
    index:
      title: 'Dashboard'
      count:
        zero: You have no CloneCalls processing right now.
        one: You have one CloneCall processing right now.
        other: You have %{count} CloneCalls processing right now.
      start:
        zero: 'Start one right now!'
        one: 'Start another one right now!'
        other: 'Start another one right now!'
    new:
      title: 'Create a new CloneCall job'
      submit: 'Make the CloneCall!'
      back: 'Go Back'
      src_repo: 'Source repository'
      dst_repo: 'Destination repository'
      branch: 'Branch name'
      start_at: 'Start time'
      end_at: 'End time'
      help:
        branch: 'If it does not exist in the source repository, default branch will be used. If it does not exist in the destination repository, it will be created.'
        dst_repo: 'Note: the repository needs to be initialized with a first commit. It is best if there is nothing more.'
        end_at: 'For the time being, we only support and end date in the past. Be sure to leave some processing room between this value and the end of the hackathon.'

  welcome:
    index:
      dashboard_link: 'Go to the dashboard.'
      site_name: 'CloneCall'
      github_signin: 'Sign in with GitHub!'
      welcome: 'Welcome %{name}!'
      lead: |
        CloneCall will help you cheat at any hackathon by allowing you to run all past commits of the repository of your choice to another repository, within dates you'll define.

        Prepare your project weeks in advance, and when the hackathon actually starts, start a CloneCall, and see your repository getting filled with commits, ending just before the deadline!

      disclaimer: |
        ## Disclaimer
        Above is the speech we would have if we were just trying to sell you this application. But this is not our goal.

        CloneCall is not intended as a tool to cheat or use maliciously. It is only a proof-of-concept to show that cheating can happen.

        There might still be one honest use of CloneCall, to our eyes: it might help you running commits to GitHub over and over again, and this way, test your own application that is tied to GitHub's systems.

        Team Kenzai doesn't approve of cheating, and exhorts Rails Rumble participants (or any developer) to use CloneCall at malevolent ends.

      genesis: |
        ## Genesis

        When we first heard of hackathons and the "no code before it starts" rule, we thought that it sounds hard to ensure, especially when the hackathon is remote. Thus, we developed CloneCall, as a proof-of-concept intended to show people can actually cheat in a way that will barely be detectable.
